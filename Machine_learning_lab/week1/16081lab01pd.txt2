# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SmaPiGF0F_k-ziAweNz4Z-LdtXt7-Ovn

# Pandas
"""

import pandas as pd # import pandas module as pd
import numpy as np

""" Series and Data Frames Series and Data Frames are the primary objects which provided by Pandas.
Series is a one-dimensional labeled array capable of holding any data type with indexing capabilities.
When it is required more than one Series of data that is aligned by a common index pandas DataFrame
can be employed. A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular
fashion in rows and columns.
"""

# create a series with a list
s = pd.Series([1,4,-2,'home'],index=['a','b','c','d'])
print(s)

"""What is the data type of s? Can it be changed?

dtype object , it can not change.
"""

# create a data frame with a dictionary
data={'population':[1.5,1.2,2.0,1.4,0.8],'state':['Nevada','Florida','Ohio','Texas','Florida'],'year':[2003,2000,2004,1990,1994]}
df=pd.DataFrame(data,index=['one','two','three','four','five'],columns=
['year','state','population','debt'])

print(s[1:3])

index 1st line to index 2nd line print

print(s[0])

print(s['d'])

print(s.values[2:]) # value list

print(df[['population','state']]) # selected list print

"""slow population"""

print(df.population)

print(df.iloc[1:]) # method is used when the index label of a data frame is something other than numeric series of 0, 1, 2, 3….n or in case the user doesn’t know the index label. Rows can be extracted using an imaginary index position which isn’t visible in the data frame.

print(df.iloc[2:4:,2:5])

print(df.loc['one'])

df.debt=34.67
df.debt=[df.iloc[:,2][i]*5 for i in range(0,df.shape[0])]
print(df.head())

print(df.tail(2))

print(df.sample(n=3))

df['newColomn']=pd.Series(np.random.randn(df.shape[0]),index=df.index)
print(df)

print(df.drop_duplicates('state'))

print(df.state)

"""### Loading data from CSV file"""

df=pd.read_csv('sampleDataSet.csv')
print(df.shape)

"""### Todo 2 
Comment on the shape of the data frame with and without setting names

(100, 9)
"""

print(df.isnull().G)

print(df.isnull().sum(0))

df=df[df.isnull().A != True ]

print(df.dropna(axis=0).isnull().sum())

df.dropna(axis=1)
df.dropna(axis=1, how='all')
df.dropna(axis=1, thresh=1)
df.drop('I',axis=1)
df.fillna(899)
df.fillna(method='ffill')
df.replace(6.3,600)
df.replace('.',np.nan)
#df[np.random.rand(df.shape[0])]=1.5



"""Applying functions Functions can be written using ‘lambda’ expression or using ordinary function definition"""

f=lambda df: df.max()-df.min()
def f(x):
  return x.max()-x.min()
df.iloc[: ,3:5].apply(f) # applying function element wise

"""Group Operations"""

grouped=df[['A','B','E']].groupby(df['I']) #group according to column ‘i’ A groupby operation involves some combination of splitting the object,
# applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups.
grouped.mean()
grouped=df[['A','B','E']].groupby([df['I'],df['C']]).mean()
grouped.unstack()

"""Data Summarizing"""

df['A'].nunique() # number of distinct values in a column
df['A'].value_counts() # count the number of rows for each unique value
df.describe() # descriptive statistics for each column
df.mean()  # function is used to return the mean of the values for the requested axis. 
#If we apply this method on a Series object, then it returns a scalar value, which is the mean value of all the observations in the dataframe.
df.sort_index().head()

"""Data Visualization"""

df.plot(kind='hist') # ‘hist’ for histogram
df.plot(kind='bar') # ‘bar’ or ‘barh’ for bar plots

df.boxplot() # visualize the distribution of values within each column.

"""# Try Out

Data wrangling is the process of transforming and mapping data from raw data into another format with the intent of making it more appropriate and valuable for a variety of downstream purposes such as analytics. Once you proceed with below steps you would able to understand how Pandas can be used for data wrangling.



1.   Load the Lab01Exercise01.csv file and specify the column names as : Chanel1, Chanel2, Chanel3, Chanel4 and Chanel5
2.   If there’s any missing values fill them with the mean value of corresponding column
3.   To see the correlation between one column to all other columns, use following code segment and comment on diagonal plot.




"""

df=pd.read_csv('Lab01Exercise01.csv') # load
print(df.shape)

df=df.set_axis(['Chanel1', 'Chanel2', 'Chanel3','Chanel4','Chanel5'], axis=1) # nameing
print(df.isnull().sum(axis = 0))

df=df.fillna(df.mean())

print(df.isnull().sum(axis = 0))

from pandas.plotting import scatter_matrix 
scatter_matrix (df , alpha =0.2 , figsize =(6, 6),diagonal='kde')

df['class'] = df.apply(lambda df: 1 if ( ((df['Chanel1'] + df['Chanel5'] )/ 2 )  <   ((df['Chanel2'] + df['Chanel3']+df['Chanel4']  )/3) ) else 0  , axis=1)

print(df.shape)

