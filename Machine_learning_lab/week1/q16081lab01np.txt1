# -*- coding: utf-8 -*-
"""ML_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YKASvTaFdgxEd8zwKgBce6fHsCMukNJm
"""

data = [1,2,'apple',4]
data

for i in range (0,10,2):
  print(i)

import numpy as np # import numpy module as np

a = np.array([1,2,3])
print(a)
print(a.dtype)

matrix = np.array ([np.arange (3), [i for i in range(1 ,4)],[6 ,7 ,8]]) 
# [np.arange (3) = [0 1 2]
# [i for i in range(1 ,4)] = using for loop 1 2 3
# [6 ,7 ,8]
print(matrix)

np.zeros((5,2,2),dtype=float) # array of all zero of float data type

k = np.ones((4,5)) # array full of one’s
print(k)

np.empty([3,4]) #array which initial content is random

np.arange (2 ,10 ,2) # array with evenly spaced values

np.arange (2 ,10 ,1).reshape(4,2) #rearranging the size of the array

np.full ([2 ,3] , 4) # creates an array with constant values

np.eye(3) # creates an identity matrix

np.linspace (2 ,3,5) # creates an evenly spaced array within specified interval

"""# Copying, Sorting, Slicing"""

np.copy(matrix) #returns the copy of the object
matrix.copy() #deep copy
matrix.view() #shallow copy
matrix.sort() # sorts in ascending order
matrix.sort(axis=1) #sort along the specified axis
print(matrix [0: ,:1],'\n') # 2D array slicing
print(matrix [:2, 0:2],'\n')
print(matrix [:1, :],'\n')

print(matrix [1,0],'\n') 
matrix [0] = 42
print(matrix [1:3],'\n')
print(matrix [:],'\n')
print(matrix [1:],'\n')
print(matrix [1:100],'\n')
print(matrix [:],'\n')
print(matrix [1: ,:2],'\n')
print(matrix [:2, 1:],'\n')

"""1

[[1 2 3]
 [6 7 8]] 

[[42 42 42]
 [ 1  2  3]
 [ 6  7  8]] 

[[1 2 3]
 [6 7 8]] 

[[1 2 3]
 [6 7 8]] 

[[42 42 42]
 [ 1  2  3]
 [ 6  7  8]] 

[[1 2]
 [6 7]] 

[[42 42]
 [ 2  3]] 
"""

matrix.ravel ()
matrix [: ,1]. copy ()
matrix [1]. tolist ()


matrix.reshape(1, 9)

"""array([[42, 42, 42,  1,  2,  3,  6,  7,  8]])"""

print(np.sqrt(matrix))
print(np.exp(matrix))
print(np.min(matrix))
print(np.max(matrix, axis=1))
print(np.min(np.maximum(np.random.randn(4),np.random.randn(4))))
print(np.mean(matrix))
print(np.mean(matrix, axis=0))
print(np.sum(matrix))
print(np.invert(matrix))
print(np.random.randn(5))
print(np.trace(matrix))

"""[[6.4807407  6.4807407  6.4807407 ]
 [1.         1.41421356 1.73205081]
 [2.44948974 2.64575131 2.82842712]]

[[1.73927494e+18 1.73927494e+18 1.73927494e+18]
 [2.71828183e+00 7.38905610e+00 2.00855369e+01]
 [4.03428793e+02 1.09663316e+03 2.98095799e+03]]

1


"""

np.eye(7,k=-1)

matrix = np.array ([np.arange (4), [i for i in range(1 ,5)],[6 ,7 ,8,9]]) 
print(matrix)

"""# numpy.sin"""

print('sin\n:-',np.sin(matrix),'\n\n') # print sin cos tan exp
print('cos\n:-',np.cos(matrix),'\n\n')
print('tan\n:-',np.tan(matrix),'\n\n')
print('exp\n:-',np.exp(matrix),'\n\n')

mac = np.array ( [[i for i in range(5 ,1,-1)],[9 ,8 ,7,6],np.arange (4)]) 
print(mac,'\n')
mac.sort(1)
print(mac,'\n')
mac.sort(0)
print(mac,'\n')

print(matrix)
print(matrix[1:,:2])

matrix[:2,1:]
matrix[1:,1]

C = matrix*mac
print(C)

D = np.multiply(matrix,mac)
print(D)

matA = np.array([[2,3,4],[4,5,6]])

matA=np.random.randint(-3,3,(5,5))

matB=np.random.randint(-3,3,(5,5))
print(matA)

D = np.multiply(matA,matB)
print(D)

"""# Python Classes (random walk) ]


Hope by now, you have the basic understanding about how to deal with NumPy. Try to solve this problem. Let’s assume you are to implement basic version of random walk. Walk would start at any point (e.g. 0 or 10) and at each step moves +1 or -1 with equal probabilities. Try to implement single random walk with 500 steps.
"""

import random

class RandomWalk :
    def __init__(self, position):
        self.position = position
    def walk(self):
        walked_path = np.empty([self.position])
        walked_path[0] = random.randint(0, 10) # starting point
       
        for i in range(1,self.position):        # random steps untile end 
            if(random.randint(0, 1)==1):
                walked_path[i] = walked_path[i-1]+1
            else:
                walked_path[i] = walked_path[i-1]-1

        return walked_path



random_walker = RandomWalk (200) # steps
print(  (random_walker.walk())) # print path